package com.c201901090124.nftmarket.solidity;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 5.0.0.
 */
@SuppressWarnings("rawtypes")
public class NFTMarket extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b506040518060400160405280600981526020017f4e46544d61726b657400000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f4e46544d4b54000000000000000000000000000000000000000000000000000081525081600090816200008f919062000365565b508060019081620000a1919062000365565b50505033600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200044c565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200016d57607f821691505b60208210810362000183576200018262000125565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ed7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001ae565b620001f98683620001ae565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000246620002406200023a8462000211565b6200021b565b62000211565b9050919050565b6000819050919050565b620002628362000225565b6200027a62000271826200024d565b848454620001bb565b825550505050565b600090565b6200029162000282565b6200029e81848462000257565b505050565b5b81811015620002c657620002ba60008262000287565b600181019050620002a4565b5050565b601f8211156200031557620002df8162000189565b620002ea846200019e565b81016020851015620002fa578190505b6200031262000309856200019e565b830182620002a3565b50505b505050565b600082821c905092915050565b60006200033a600019846008026200031a565b1980831691505092915050565b600062000355838362000327565b9150826002028217905092915050565b6200037082620000eb565b67ffffffffffffffff8111156200038c576200038b620000f6565b5b62000398825462000154565b620003a5828285620002ca565b600060209050601f831160018114620003dd5760008415620003c8578287015190505b620003d4858262000347565b86555062000444565b601f198416620003ed8662000189565b60005b828110156200041757848901518255600182019150602085019450602081019050620003f0565b8683101562000437578489015162000433601f89168262000327565b8355505b6001600288020188555050505b505050505050565b613b37806200045c6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80634f6ccce7116100b857806395d89b411161007c57806395d89b4114610372578063a22cb46514610390578063b88d4fde146103ac578063c87b56dd146103c8578063e985e9c5146103f8578063eacabe141461042857610137565b80634f6ccce7146102bc57806355f804b3146102ec5780636352211e1461030857806370a082311461033857806383197ef01461036857610137565b806323b872dd116100ff57806323b872dd146101f45780632890e0d7146102105780632a6ffd2c146102405780632f745c591461027057806342842e0e146102a057610137565b806301ffc9a71461013c57806306fdde031461016c578063081812fc1461018a578063095ea7b3146101ba57806318160ddd146101d6575b600080fd5b6101566004803603810190610151919061251e565b610458565b6040516101639190612566565b60405180910390f35b61017461046a565b6040516101819190612611565b60405180910390f35b6101a4600480360381019061019f9190612669565b6104fc565b6040516101b191906126d7565b60405180910390f35b6101d460048036038101906101cf919061271e565b610542565b005b6101de610659565b6040516101eb919061276d565b60405180910390f35b61020e60048036038101906102099190612788565b610666565b005b61022a60048036038101906102259190612669565b6106c6565b604051610237919061276d565b60405180910390f35b61025a60048036038101906102559190612788565b61074f565b604051610267919061276d565b60405180910390f35b61028a6004803603810190610285919061271e565b6107dc565b604051610297919061276d565b60405180910390f35b6102ba60048036038101906102b59190612788565b610881565b005b6102d660048036038101906102d19190612669565b6108a1565b6040516102e3919061276d565b60405180910390f35b61030660048036038101906103019190612910565b610912565b005b610322600480360381019061031d9190612669565b610925565b60405161032f91906126d7565b60405180910390f35b610352600480360381019061034d9190612959565b6109ab565b60405161035f919061276d565b60405180910390f35b610370610a62565b005b61037a610b2d565b6040516103879190612611565b60405180910390f35b6103aa60048036038101906103a591906129b2565b610bbf565b005b6103c660048036038101906103c19190612a93565b610bd5565b005b6103e260048036038101906103dd9190612669565b610c37565b6040516103ef9190612611565b60405180910390f35b610412600480360381019061040d9190612b16565b610da9565b60405161041f9190612566565b60405180910390f35b610442600480360381019061043d9190612b56565b610e3d565b60405161044f919061276d565b60405180910390f35b600061046382610e75565b9050919050565b60606000805461047990612be1565b80601f01602080910402602001604051908101604052809291908181526020018280546104a590612be1565b80156104f25780601f106104c7576101008083540402835291602001916104f2565b820191906000526020600020905b8154815290600101906020018083116104d557829003601f168201915b5050505050905090565b600061050782610eef565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061054d82610925565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036105bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b490612c84565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105dc610f3a565b73ffffffffffffffffffffffffffffffffffffffff16148061060b575061060a81610605610f3a565b610da9565b5b61064a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064190612d16565b60405180910390fd5b6106548383610f42565b505050565b6000600880549050905090565b610677610671610f3a565b82610ffb565b6106b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ad90612da8565b60405180910390fd5b6106c1838383611090565b505050565b60006106d182610925565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073590612e3a565b60405180910390fd5b61074782611389565b819050919050565b600061075a82610925565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be90612ecc565b60405180910390fd5b6107d2848484610666565b8190509392505050565b60006107e7836109ab565b8210610828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081f90612f5e565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b61089c83838360405180602001604052806000815250610bd5565b505050565b60006108ab610659565b82106108ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e390612ff0565b60405180910390fd5b60088281548110610900576108ff613010565b5b90600052602060002001549050919050565b80600e908161092191906131eb565b5050565b60008061093183611395565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099990613309565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a129061339b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae99061342d565b60405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b606060018054610b3c90612be1565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6890612be1565b8015610bb55780601f10610b8a57610100808354040283529160200191610bb5565b820191906000526020600020905b815481529060010190602001808311610b9857829003601f168201915b5050505050905090565b610bd1610bca610f3a565b83836113d2565b5050565b610be6610be0610f3a565b83610ffb565b610c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1c90612da8565b60405180910390fd5b610c318484848461153e565b50505050565b6060610c428261159a565b610c81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c78906134bf565b60405180910390fd5b6000600d60008481526020019081526020016000208054610ca190612be1565b80601f0160208091040260200160405190810160405280929190818152602001828054610ccd90612be1565b8015610d1a5780601f10610cef57610100808354040283529160200191610d1a565b820191906000526020600020905b815481529060010190602001808311610cfd57829003601f168201915b505050505090506000610d2b6115db565b90506000815103610d40578192505050610da4565b600082511115610d75578082604051602001610d5d92919061351b565b60405160208183030381529060405292505050610da4565b80610d7f8561166d565b604051602001610d9092919061351b565b604051602081830303815290604052925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000610e49600b61173b565b6000610e55600b611751565b9050610e61848261175f565b610e6b818461197c565b8091505092915050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610ee85750610ee7826119e9565b5b9050919050565b610ef88161159a565b610f37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2e90613309565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610fb583610925565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061100783610925565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061104957506110488185610da9565b5b8061108757508373ffffffffffffffffffffffffffffffffffffffff1661106f846104fc565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166110b082610925565b73ffffffffffffffffffffffffffffffffffffffff1614611106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fd906135b1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116c90613643565b60405180910390fd5b6111828383836001611acb565b8273ffffffffffffffffffffffffffffffffffffffff166111a282610925565b73ffffffffffffffffffffffffffffffffffffffff16146111f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ef906135b1565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46113848383836001611add565b505050565b61139281611ae3565b50565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611440576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611437906136af565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115319190612566565b60405180910390a3505050565b611549848484611090565b61155584848484611b36565b611594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b90613741565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166115bc83611395565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6060600e80546115ea90612be1565b80601f016020809104026020016040519081016040528092919081815260200182805461161690612be1565b80156116635780601f1061163857610100808354040283529160200191611663565b820191906000526020600020905b81548152906001019060200180831161164657829003601f168201915b5050505050905090565b60606000600161167c84611cbd565b01905060008167ffffffffffffffff81111561169b5761169a6127e5565b5b6040519080825280601f01601f1916602001820160405280156116cd5781602001600182028036833780820191505090505b509050600082602001820190505b600115611730578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161172457611723613761565b5b049450600085036116db575b819350505050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c5906137dc565b60405180910390fd5b6117d78161159a565b15611817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180e90613848565b60405180910390fd5b611825600083836001611acb565b61182e8161159a565b1561186e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186590613848565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611978600083836001611add565b5050565b6119858261159a565b6119c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bb906138da565b60405180910390fd5b80600d600084815260200190815260200160002090816119e491906131eb565b505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611ab457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611ac45750611ac382611e10565b5b9050919050565b611ad784848484611e7a565b50505050565b50505050565b611aec81611fd8565b6000600a60008381526020019081526020016000208054611b0c90612be1565b905014611b3357600a60008281526020019081526020016000206000611b329190612455565b5b50565b6000611b578473ffffffffffffffffffffffffffffffffffffffff16612126565b15611cb0578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b80610f3a565b8786866040518563ffffffff1660e01b8152600401611ba2949392919061394f565b6020604051808303816000875af1925050508015611bde57506040513d601f19601f82011682018060405250810190611bdb91906139b0565b60015b611c60573d8060008114611c0e576040519150601f19603f3d011682016040523d82523d6000602084013e611c13565b606091505b506000815103611c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4f90613741565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611cb5565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611d1b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611d1157611d10613761565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611d58576d04ee2d6d415b85acef81000000008381611d4e57611d4d613761565b5b0492506020810190505b662386f26fc100008310611d8757662386f26fc100008381611d7d57611d7c613761565b5b0492506010810190505b6305f5e1008310611db0576305f5e1008381611da657611da5613761565b5b0492506008810190505b6127108310611dd5576127108381611dcb57611dca613761565b5b0492506004810190505b60648310611df85760648381611dee57611ded613761565b5b0492506002810190505b600a8310611e07576001810190505b80915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611e8684848484612149565b6001811115611eca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec190613a4f565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611f1157611f0c8161214f565b611f50565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611f4f57611f4e8582612198565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611f9257611f8d81612305565b611fd1565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611fd057611fcf84826123d6565b5b5b5050505050565b6000611fe382610925565b9050611ff3816000846001611acb565b611ffc82610925565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612122816000846001611add565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b600060016121a5846109ab565b6121af9190613a9e565b9050600060076000848152602001908152602001600020549050818114612294576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506123199190613a9e565b905060006009600084815260200190815260200160002054905060006008838154811061234957612348613010565b5b90600052602060002001549050806008838154811061236b5761236a613010565b5b9060005260206000200181905550816009600083815260200190815260200160002081905550600960008581526020019081526020016000206000905560088054806123ba576123b9613ad2565b5b6001900381819060005260206000200160009055905550505050565b60006123e1836109ab565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b50805461246190612be1565b6000825580601f106124735750612492565b601f0160209004906000526020600020908101906124919190612495565b5b50565b5b808211156124ae576000816000905550600101612496565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6124fb816124c6565b811461250657600080fd5b50565b600081359050612518816124f2565b92915050565b600060208284031215612534576125336124bc565b5b600061254284828501612509565b91505092915050565b60008115159050919050565b6125608161254b565b82525050565b600060208201905061257b6000830184612557565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156125bb5780820151818401526020810190506125a0565b60008484015250505050565b6000601f19601f8301169050919050565b60006125e382612581565b6125ed818561258c565b93506125fd81856020860161259d565b612606816125c7565b840191505092915050565b6000602082019050818103600083015261262b81846125d8565b905092915050565b6000819050919050565b61264681612633565b811461265157600080fd5b50565b6000813590506126638161263d565b92915050565b60006020828403121561267f5761267e6124bc565b5b600061268d84828501612654565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006126c182612696565b9050919050565b6126d1816126b6565b82525050565b60006020820190506126ec60008301846126c8565b92915050565b6126fb816126b6565b811461270657600080fd5b50565b600081359050612718816126f2565b92915050565b60008060408385031215612735576127346124bc565b5b600061274385828601612709565b925050602061275485828601612654565b9150509250929050565b61276781612633565b82525050565b6000602082019050612782600083018461275e565b92915050565b6000806000606084860312156127a1576127a06124bc565b5b60006127af86828701612709565b93505060206127c086828701612709565b92505060406127d186828701612654565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61281d826125c7565b810181811067ffffffffffffffff8211171561283c5761283b6127e5565b5b80604052505050565b600061284f6124b2565b905061285b8282612814565b919050565b600067ffffffffffffffff82111561287b5761287a6127e5565b5b612884826125c7565b9050602081019050919050565b82818337600083830152505050565b60006128b36128ae84612860565b612845565b9050828152602081018484840111156128cf576128ce6127e0565b5b6128da848285612891565b509392505050565b600082601f8301126128f7576128f66127db565b5b81356129078482602086016128a0565b91505092915050565b600060208284031215612926576129256124bc565b5b600082013567ffffffffffffffff811115612944576129436124c1565b5b612950848285016128e2565b91505092915050565b60006020828403121561296f5761296e6124bc565b5b600061297d84828501612709565b91505092915050565b61298f8161254b565b811461299a57600080fd5b50565b6000813590506129ac81612986565b92915050565b600080604083850312156129c9576129c86124bc565b5b60006129d785828601612709565b92505060206129e88582860161299d565b9150509250929050565b600067ffffffffffffffff821115612a0d57612a0c6127e5565b5b612a16826125c7565b9050602081019050919050565b6000612a36612a31846129f2565b612845565b905082815260208101848484011115612a5257612a516127e0565b5b612a5d848285612891565b509392505050565b600082601f830112612a7a57612a796127db565b5b8135612a8a848260208601612a23565b91505092915050565b60008060008060808587031215612aad57612aac6124bc565b5b6000612abb87828801612709565b9450506020612acc87828801612709565b9350506040612add87828801612654565b925050606085013567ffffffffffffffff811115612afe57612afd6124c1565b5b612b0a87828801612a65565b91505092959194509250565b60008060408385031215612b2d57612b2c6124bc565b5b6000612b3b85828601612709565b9250506020612b4c85828601612709565b9150509250929050565b60008060408385031215612b6d57612b6c6124bc565b5b6000612b7b85828601612709565b925050602083013567ffffffffffffffff811115612b9c57612b9b6124c1565b5b612ba8858286016128e2565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612bf957607f821691505b602082108103612c0c57612c0b612bb2565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c6e60218361258c565b9150612c7982612c12565b604082019050919050565b60006020820190508181036000830152612c9d81612c61565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612d00603d8361258c565b9150612d0b82612ca4565b604082019050919050565b60006020820190508181036000830152612d2f81612cf3565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612d92602d8361258c565b9150612d9d82612d36565b604082019050919050565b60006020820190508181036000830152612dc181612d85565b9050919050565b7f4f6e6c7920746865206f776e6572206f66207468697320546f6b656e20636f7560008201527f6c64204275726e20497421000000000000000000000000000000000000000000602082015250565b6000612e24602b8361258c565b9150612e2f82612dc8565b604082019050919050565b60006020820190508181036000830152612e5381612e17565b9050919050565b7f4f6e6c7920746865206f776e6572206f66207468697320546f6b656e20636f7560008201527f6c64207472616e73666572204974210000000000000000000000000000000000602082015250565b6000612eb6602f8361258c565b9150612ec182612e5a565b604082019050919050565b60006020820190508181036000830152612ee581612ea9565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000612f48602b8361258c565b9150612f5382612eec565b604082019050919050565b60006020820190508181036000830152612f7781612f3b565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000612fda602c8361258c565b9150612fe582612f7e565b604082019050919050565b6000602082019050818103600083015261300981612fcd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026130a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613064565b6130ab8683613064565b95508019841693508086168417925050509392505050565b6000819050919050565b60006130e86130e36130de84612633565b6130c3565b612633565b9050919050565b6000819050919050565b613102836130cd565b61311661310e826130ef565b848454613071565b825550505050565b600090565b61312b61311e565b6131368184846130f9565b505050565b5b8181101561315a5761314f600082613123565b60018101905061313c565b5050565b601f82111561319f576131708161303f565b61317984613054565b81016020851015613188578190505b61319c61319485613054565b83018261313b565b50505b505050565b600082821c905092915050565b60006131c2600019846008026131a4565b1980831691505092915050565b60006131db83836131b1565b9150826002028217905092915050565b6131f482612581565b67ffffffffffffffff81111561320d5761320c6127e5565b5b6132178254612be1565b61322282828561315e565b600060209050601f8311600181146132555760008415613243578287015190505b61324d85826131cf565b8655506132b5565b601f1984166132638661303f565b60005b8281101561328b57848901518255600182019150602085019450602081019050613266565b868310156132a857848901516132a4601f8916826131b1565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006132f360188361258c565b91506132fe826132bd565b602082019050919050565b60006020820190508181036000830152613322816132e6565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061338560298361258c565b915061339082613329565b604082019050919050565b600060208201905081810360008301526133b481613378565b9050919050565b7f4f6e6c7920746865206f776e6572206f66207468697320436f6e74726163742060008201527f636f756c642064657374726f7920497421000000000000000000000000000000602082015250565b600061341760318361258c565b9150613422826133bb565b604082019050919050565b600060208201905081810360008301526134468161340a565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b60006134a9602f8361258c565b91506134b48261344d565b604082019050919050565b600060208201905081810360008301526134d88161349c565b9050919050565b600081905092915050565b60006134f582612581565b6134ff81856134df565b935061350f81856020860161259d565b80840191505092915050565b600061352782856134ea565b915061353382846134ea565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061359b60258361258c565b91506135a68261353f565b604082019050919050565b600060208201905081810360008301526135ca8161358e565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061362d60248361258c565b9150613638826135d1565b604082019050919050565b6000602082019050818103600083015261365c81613620565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061369960198361258c565b91506136a482613663565b602082019050919050565b600060208201905081810360008301526136c88161368c565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061372b60328361258c565b9150613736826136cf565b604082019050919050565b6000602082019050818103600083015261375a8161371e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006137c660208361258c565b91506137d182613790565b602082019050919050565b600060208201905081810360008301526137f5816137b9565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613832601c8361258c565b915061383d826137fc565b602082019050919050565b6000602082019050818103600083015261386181613825565b9050919050565b7f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006138c4602c8361258c565b91506138cf82613868565b604082019050919050565b600060208201905081810360008301526138f3816138b7565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613921826138fa565b61392b8185613905565b935061393b81856020860161259d565b613944816125c7565b840191505092915050565b600060808201905061396460008301876126c8565b61397160208301866126c8565b61397e604083018561275e565b81810360608301526139908184613916565b905095945050505050565b6000815190506139aa816124f2565b92915050565b6000602082840312156139c6576139c56124bc565b5b60006139d48482850161399b565b91505092915050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000613a3960358361258c565b9150613a44826139dd565b604082019050919050565b60006020820190508181036000830152613a6881613a2c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613aa982612633565b9150613ab483612633565b9250828203905081811115613acc57613acb613a6f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220905c08cdc60f7800e045b585d33bb79a9f09661f060aa4c511a6cce3f07a3f2e64736f6c63430008120033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BURNNFT = "burnNFT";

    public static final String FUNC_DESTROY = "destroy";

    public static final String FUNC_MINTNFT = "mintNFT";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBASEURI = "setBaseURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSNFT = "transNFT";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected NFTMarket(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NFTMarket(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NFTMarket(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NFTMarket(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnNFT(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> destroy() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DESTROY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintNFT(String _to, String tokenURI_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.Utf8String(tokenURI_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBaseURI(String baseURI_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBASEURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(baseURI_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transNFT(String _from, String _to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _from), 
                new org.web3j.abi.datatypes.Address(160, _to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static NFTMarket load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTMarket(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NFTMarket load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFTMarket(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NFTMarket load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NFTMarket(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NFTMarket load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NFTMarket(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NFTMarket> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NFTMarket.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<NFTMarket> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(NFTMarket.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NFTMarket> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NFTMarket.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<NFTMarket> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(NFTMarket.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
